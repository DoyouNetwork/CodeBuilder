using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Rocket.Model;
using Rocket.Tools;

namespace Rocket.Web.Controllers
{
    public class @(Model.ControllerName)Controller : BaseController
    {
        Entities _db = null;
        public @(Model.ControllerName)Controller(Entities db)
        {
            _db = db;

            try
            {
                Int32.TryParse(Request.Form["page"], out json.page);
                Int32.TryParse(Request.Form["limit"], out json.limit);
            }
            catch (Exception ex) { }

            json.code = 1;
            json.msg = "";
            json.hash = json.page;
            json.count = 0;
            json.data = null;

        }

        #region 视图
        public IActionResult Index()
        {
            return View();
        }

        //列表视图
        public IActionResult List()
        {
            return View();
        }

        //编辑视图  添加视图
        public IActionResult Edit(Guid? id = null)
        {
            if (id != null)
            {
                ViewData["id"] = id;
            }

            return View();
        }
        #endregion

        #region 数据接口
        //列表数据
        public IActionResult GetList(int page = 1, int limit = 10, string key = "")
        {
            IQueryable<@(Model.ControllerName)> query = _db.@(Model.ControllerName);

            if (!string.IsNullOrEmpty(key))
            {
                query = query.Where(c => c.ID.Contains(key));
            }


            json.count = query.Count();
            json.data = query.Page(page, limit);
            json.msg = "查询成功";
            json.code = 0;

            return Json(json);
        }

        //获取单个实体对象
        public IActionResult GetData(Guid id)
        {
            json.data = _db.@(Model.ControllerName).FirstOrDefault(c => c.ID == id.ToString());
            if (json.data != null)
            {
                json.code = 0;
                json.msg = "查询成功";
            }
            else
            {
                json.msg = "没有查到数据";
            }
            return Json(json);
        }

        //添加实体对象
        public IActionResult AddData(@(Model.ControllerName) data)
        {
            int count = 0;
            string error = "";
            try
            {
                data.CreateTime = DateTime.Now;
                _db.@(Model.ControllerName).Add(data);
                count = _db.SaveChanges();
            }
            catch (Exception ex)
            {
                error = ex.Message;
            }


            if (count >= 1)
            {
                json.code = 0;
                json.msg = String.Format("成功添加了{0}条数据", count);
            }
            else
            {
                json.msg = String.Format("添加数据失败,{0}", error);
            }

            return Json(json);
        }

        //删除实体对象通过ID
        public IActionResult DeleteData(Guid id)
        {
            var data = new @(Model.ControllerName)() { ID = id.ToString() };
            _db.@(Model.ControllerName).Attach(data);
            _db.@(Model.ControllerName).Remove(data);
            int count = _db.SaveChanges();

            if (count > 0)
            {
                json.code = 0;
                json.msg = String.Format("成功删除了{0}条数据", count);
            }
            else
            {
                json.msg = String.Format("删除数据失败");
            }
            return Json(json);
        }

        //更新实体对象
        public IActionResult UpdateData(@(Model.ControllerName) data)
        {
            @(Model.ControllerName) dataTemp = _db.@(Model.ControllerName).FirstOrDefault(c => c.ID == data.ID);
            if (dataTemp != null)
            {
@foreach(var d in Model.ColumnList){
WriteLiteral("dataTemp."+@d.Name+" = data."+@d.Name+";\r\n");
}
              

                int count = _db.SaveChanges();

                if (count > 0)
                {
                    json.code = 0;
                    json.msg = String.Format("成功更新了{0}条数据", count);
                }
                else
                {
                    json.msg = String.Format("更新数据失败");
                }
            }
            else
            {
                json.msg = "没有查到数据";
            }

            return Json(json);
        }
        #endregion
    }
}