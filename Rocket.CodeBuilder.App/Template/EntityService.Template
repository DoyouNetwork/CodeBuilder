using Microsoft.EntityFrameworkCore;
using Steer.Model;
using Steer.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

namespace Steer.Service
{
    
    public class @(Model.Name)Service : RepositoryBase<@(Model.Name)>
    {
        #region Fields
        private readonly SteerContext _context;
        #endregion

        #region Ctor
        public @(Model.Name)Service(SteerContext context): base(context)
        {
            _context = context;
        }
        #endregion

        #region Method
        /// <summary>
        /// 数据库查询对象
        /// </summary>
		public DbSet<@(Model.Name)> @(Model.Name) => _context.@(Model.Name);

        /// <summary>
        /// 获取最新的实体对象
        /// </summary>
        /// <param name="id">数据Id</param>
		public @(Model.Name) GetData(@(Model.GetKeyType()) id)
        {
            @(Model.Name) @((Model.Name).ToLower()) = _context.@(Model.Name).FirstOrDefault(c => c.Id == id);

            return @((Model.Name).ToLower());
        }

        /// <summary>
        /// 添加@(Model.Name)
        /// </summary>
        /// <param name="@((Model.Name).ToLower())">@(Model.Name)实体</param>
        /// <returns>返回影响数据条数,如果添加失败则返回0</returns>
        public int AddData(@(Model.Name) @((Model.Name).ToLower()))
        {
            _context.@(Model.Name).Add(@((Model.Name).ToLower()));
            
            return _context.SaveChanges();
        }

        /// <summary>
        /// 删除@(Model.Name)
        /// </summary>
        /// <param name="id">@(Model.Name)Id</param>
        /// <returns>返回值大于1则表示删除成功</returns>
        public int DeleteData(@(Model.GetKeyType()) id)
        {
            @(Model.Name) @((Model.Name).ToLower()) = _context.@(Model.Name).FirstOrDefault(c => c.Id == id);

            return DeleteData(@((Model.Name).ToLower()));
        }

        /// <summary>
        /// 删除@(Model.Name)
        /// </summary>
        /// <param name="@((Model.Name).ToLower())">@(Model.Name)实体</param>
        /// <returns>返回值大于1则表示删除成功</returns>
        public int DeleteData(@(Model.Name) @((Model.Name).ToLower()))
        {
            if (@((Model.Name).ToLower()) != null)
            {
                _context.@(Model.Name).Remove(@((Model.Name).ToLower()));
            }

            return _context.SaveChanges();
        }

        /// <summary>
        /// 更新@(Model.Name)对象
        /// </summary>
        /// <param name="@((Model.Name).ToLower())">@(Model.Name)实体</param>
        /// <returns>返回结果大于1则表示更新成功</returns>
        public int UpdateData(@(Model.Name) @((Model.Name).ToLower()))
        {
            if (@((Model.Name).ToLower()) == null)
            {
                return 0;
            }

            @(Model.Name) db@(Model.Name) = _context.@(Model.Name).FirstOrDefault(c => c.Id == @((Model.Name).ToLower()).Id);
            if (db@(Model.Name) == null)
            {
                return 0;
            }

@foreach(var d in Model.ColumnList){
    if(d.IsKey){
continue;
    }
WriteLiteral("\t\t\t\t\n db"+ @Model.Name +"."+ d.Name +" = "+ @Model.Name.ToLower() +"."+ @d.Name +";\r\n");
}

            return _context.SaveChanges();
        }
        #endregion
    }
}
